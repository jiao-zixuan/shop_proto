// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamGreeterClient is the client API for StreamGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamGreeterClient interface {
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginHelloReply, error)
	GetStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (StreamGreeter_GetStreamClient, error)
	PusStream(ctx context.Context, opts ...grpc.CallOption) (StreamGreeter_PusStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (StreamGreeter_AllStreamClient, error)
}

type streamGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamGreeterClient(cc grpc.ClientConnInterface) StreamGreeterClient {
	return &streamGreeterClient{cc}
}

func (c *streamGreeterClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginHelloReply, error) {
	out := new(UserLoginHelloReply)
	err := c.cc.Invoke(ctx, "/StreamGreeter/userLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamGreeterClient) GetStream(ctx context.Context, in *StreamReqData, opts ...grpc.CallOption) (StreamGreeter_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamGreeter_ServiceDesc.Streams[0], "/StreamGreeter/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGreeterGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamGreeter_GetStreamClient interface {
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type streamGreeterGetStreamClient struct {
	grpc.ClientStream
}

func (x *streamGreeterGetStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamGreeterClient) PusStream(ctx context.Context, opts ...grpc.CallOption) (StreamGreeter_PusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamGreeter_ServiceDesc.Streams[1], "/StreamGreeter/PusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGreeterPusStreamClient{stream}
	return x, nil
}

type StreamGreeter_PusStreamClient interface {
	Send(*StreamReqData) error
	CloseAndRecv() (*StreamResData, error)
	grpc.ClientStream
}

type streamGreeterPusStreamClient struct {
	grpc.ClientStream
}

func (x *streamGreeterPusStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamGreeterPusStreamClient) CloseAndRecv() (*StreamResData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamGreeterClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (StreamGreeter_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamGreeter_ServiceDesc.Streams[2], "/StreamGreeter/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGreeterAllStreamClient{stream}
	return x, nil
}

type StreamGreeter_AllStreamClient interface {
	Send(*StreamReqData) error
	Recv() (*StreamResData, error)
	grpc.ClientStream
}

type streamGreeterAllStreamClient struct {
	grpc.ClientStream
}

func (x *streamGreeterAllStreamClient) Send(m *StreamReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamGreeterAllStreamClient) Recv() (*StreamResData, error) {
	m := new(StreamResData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamGreeterServer is the server API for StreamGreeter service.
// All implementations must embed UnimplementedStreamGreeterServer
// for forward compatibility
type StreamGreeterServer interface {
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginHelloReply, error)
	GetStream(*StreamReqData, StreamGreeter_GetStreamServer) error
	PusStream(StreamGreeter_PusStreamServer) error
	AllStream(StreamGreeter_AllStreamServer) error
	mustEmbedUnimplementedStreamGreeterServer()
}

// UnimplementedStreamGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamGreeterServer struct {
}

func (UnimplementedStreamGreeterServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginHelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedStreamGreeterServer) GetStream(*StreamReqData, StreamGreeter_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedStreamGreeterServer) PusStream(StreamGreeter_PusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PusStream not implemented")
}
func (UnimplementedStreamGreeterServer) AllStream(StreamGreeter_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}
func (UnimplementedStreamGreeterServer) mustEmbedUnimplementedStreamGreeterServer() {}

// UnsafeStreamGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamGreeterServer will
// result in compilation errors.
type UnsafeStreamGreeterServer interface {
	mustEmbedUnimplementedStreamGreeterServer()
}

func RegisterStreamGreeterServer(s grpc.ServiceRegistrar, srv StreamGreeterServer) {
	s.RegisterService(&StreamGreeter_ServiceDesc, srv)
}

func _StreamGreeter_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamGreeterServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamGreeter/userLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamGreeterServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamGreeter_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamGreeterServer).GetStream(m, &streamGreeterGetStreamServer{stream})
}

type StreamGreeter_GetStreamServer interface {
	Send(*StreamResData) error
	grpc.ServerStream
}

type streamGreeterGetStreamServer struct {
	grpc.ServerStream
}

func (x *streamGreeterGetStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamGreeter_PusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamGreeterServer).PusStream(&streamGreeterPusStreamServer{stream})
}

type StreamGreeter_PusStreamServer interface {
	SendAndClose(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type streamGreeterPusStreamServer struct {
	grpc.ServerStream
}

func (x *streamGreeterPusStreamServer) SendAndClose(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamGreeterPusStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamGreeter_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamGreeterServer).AllStream(&streamGreeterAllStreamServer{stream})
}

type StreamGreeter_AllStreamServer interface {
	Send(*StreamResData) error
	Recv() (*StreamReqData, error)
	grpc.ServerStream
}

type streamGreeterAllStreamServer struct {
	grpc.ServerStream
}

func (x *streamGreeterAllStreamServer) Send(m *StreamResData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamGreeterAllStreamServer) Recv() (*StreamReqData, error) {
	m := new(StreamReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamGreeter_ServiceDesc is the grpc.ServiceDesc for StreamGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamGreeter",
	HandlerType: (*StreamGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userLogin",
			Handler:    _StreamGreeter_UserLogin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _StreamGreeter_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PusStream",
			Handler:       _StreamGreeter_PusStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _StreamGreeter_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
